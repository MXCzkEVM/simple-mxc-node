############################### DEFAULT #####################################
# Chain ID
CHAIN_ID=5167003

# Exposed ports
PORT_L2_EXECTION_ENGINE_HTTP=8545
PORT_L2_EXECTION_ENGINE_WS=8546
PORT_L2_EXECTION_ENGINE_METRICS=6060
PORT_L2_EXECTION_ENGINE_P2P=30303
PORT_ZKEVM_CHAIN_PROVER_RPCD=9000
PORT_PROMETHEUS=9090
PORT_GRAFANA=3000

# Comma separated L2 execution engine bootnode URLs for P2P discovery bootstrap
BOOT_NODES=enode://180b0631eba742bcc67e4e8bb191f28bf83685714f4054a3f5129ab3043d79745e72d66806fc4ef571bcae1fbefae71c122f38e8e210449f4661fc17c3d5fd33@207.246.99.8:30303,enode://41185fa22abb9704b9b9906b81c8701f53b21badbe10ff0746326e83fa9327a9dd110b0b0639371a658f9aaeb89a025a7ec9c4ded9a3557b4ee55b6818741636@144.202.111.198:30303

# MXC protocol contract addresses
MXC_L1_ADDRESS=0xaFC87201573c7AE994ab1bb546e3DB3A91F7F78A
MXC_L2_ADDRESS=0x1000777700000000000000000000000000000001

# A L2 account private key for building throw-away L2 blocks, for more detailed information, please
# see whitepaper's `5.5.1 Invalid Blocks`.
L2_THROWAWAY_BLOCK_BUILDER_PRIVATE_KEY=92954368afd3caa1f3ce3ead0069c1af414054aefe1ef9aeacc1bf426222ce38 # LibAnchorSignature.K_GOLDEN_TOUCH_PRIVATEKEY

############################### REQUIRED #####################################
# L1 Arbitrum Goerli RPC endpoints (you will need an RPC provider such as Alchemy or Infura--or, run a full Arbitrum Goerli node yourself)
L1_ENDPOINT_HTTP=https://goerli-rollup.arbitrum.io/rpc
L1_ENDPOINT_WS=

############################### OPTIONAL #####################################
# If you want to be a proposer who proposes L2 execution engine's transactions in mempool to MXC L1 protocol
# contract (be a "mining L2 node"), you need to change `ENABLE_PROPOSER` to true, then fill `L1_PROPOSER_PRIVATE_KEY`
# and `L2_SUGGESTED_FEE_RECIPIENT`
ENABLE_PROPOSER=false
L1_PROPOSER_PRIVATE_KEY=
# A L2 account address who will be the tx fee beneficiary of the L2 blocks that you proposed
L2_SUGGESTED_FEE_RECIPIENT=
# If you want to be a prover who generates and submits zero knowledge proofs of proposed L2 blocks, you need to change
# `ENABLE_PROVER` to true and set `L1_PROVER_PRIVATE_KEY`.
ENABLE_PROVER=false
# An L1 account (with balance) private key which will send the MXCL1.proveBlock transactions.
L1_PROVER_PRIVATE_KEY=
