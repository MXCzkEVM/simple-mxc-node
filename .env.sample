############################### DEFAULT #####################################
# Chain ID
CHAIN_ID=5167004

# Exposed ports
PORT_L2_EXECTION_ENGINE_HTTP=8545
PORT_L2_EXECTION_ENGINE_WS=8546
PORT_L2_EXECTION_ENGINE_METRICS=6060
PORT_L2_EXECTION_ENGINE_P2P=30303
PORT_L2_EXECTION_ENGINE_AUTH_RPC=8551
PORT_ZKEVM_CHAIN_PROVER_RPCD=9000
PORT_PROMETHEUS=9090
PORT_GRAFANA=3000

# Comma separated L2 execution engine bootnode URLs for P2P discovery bootstrap
BOOT_NODES=enode://5c9f06b95d5921cce907043b6bfa15f77c8b8702b4495976cd0d4c34914268cfc99652ed4f0061b19b9cb25ba99c3d8329ef24252e684c359be6a84be99084c9@207.246.99.8:30303,enode://051518c3a042938c30f20fb492e5844591b4c88e46317c754158e60440f619a8bca2854825560fea21533817c38288ce843d496df026b2e48456ad413bd22ac0@144.202.111.198:30303

# MXC protocol contract addresses
MXC_L1_ADDRESS=0x6a5c9E342d5FB5f5EF8a799f0cAAB2678c939b0B
MXC_L2_ADDRESS=0x1000777700000000000000000000000000000001

# A L2 account private key for building throw-away L2 blocks, for more detailed information, please
# see whitepaper's `5.5.1 Invalid Blocks`.
L2_THROWAWAY_BLOCK_BUILDER_PRIVATE_KEY=006ce077e1e1f3935c31c1c4ace150d8772faf4f4fca1dccb59ebbca90ca4af6 # LibAnchorSignature.K_GOLDEN_TOUCH_PRIVATEKEY

############################### REQUIRED #####################################
# L1 Arbitrum one RPC endpoints (you will need an RPC provider such as Alchemy or Infura--or, run a full Arbitrum one node yourself)
L1_ENDPOINT_HTTP=
L1_ENDPOINT_WS=

############################### OPTIONAL #####################################
# If you want to be a proposer who proposes L2 execution engine's transactions in mempool to MXC L1 protocol
# contract (be a "mining L2 node"), you need to change `ENABLE_PROPOSER` to true, then fill `L1_PROPOSER_PRIVATE_KEY`
# and `L2_SUGGESTED_FEE_RECIPIENT`
ENABLE_PROPOSER=false
L1_PROPOSER_PRIVATE_KEY=
# A L2 account address who will be the tx fee beneficiary of the L2 blocks that you proposed
L2_SUGGESTED_FEE_RECIPIENT=
# If you want to be a prover who generates and submits zero knowledge proofs of proposed L2 blocks, you need to change
# `ENABLE_PROVER` to true and set `L1_PROVER_PRIVATE_KEY`.
ENABLE_PROVER=false
# An L1 account (with balance) private key which will send the MXCL1.proveBlock transactions.
L1_PROVER_PRIVATE_KEY=
