############################### DEFAULT #####################################
# Chain ID
CHAIN_ID=18686

# Exposed ports
PORT_L2_EXECUTION_ENGINE_HTTP=8547
PORT_L2_EXECUTION_ENGINE_WS=8548
PORT_L2_EXECUTION_ENGINE_METRICS=6060
PORT_L2_EXECUTION_ENGINE_P2P=30306
PORT_PROVER_SERVER=9876
PORT_PROMETHEUS=9091
PORT_GRAFANA=3001
# Comma-separated profiles to be used by default (l2_execution_engine,proposer,prover)
COMPOSE_PROFILES=l2_execution_engine

# Comma separated L2 execution engine bootnode URLs for P2P discovery bootstrap
BOOT_NODES=enode://d226b47b9c1199a21d9d11d664269261717b1c67fa67062d3eecc84285537fe161cbac3804ea036ed516d257f95215f49400952f03c43174d3a3af415ff47d75@207.246.101.30:30306,enode://1f5e524a11f5dc02f03113faa4090cafa0d692e9decff1199a1dc304d2d1f6fba07a7e7016026e0356b3e6c35e873a95a295c0326e888554224a1ec3fded330a@149.28.212.112:30306

# Taiko protocol contract addresses
TAIKO_L1_ADDRESS=0x54D8864e8855A7B66eE42B8F2Eaa0F2E06bd641a
TAIKO_TOKEN_L1_ADDRESS=0xaedf7656fbb47c5b97dd529ac1d0e807e051f2dd
TAIKO_L2_ADDRESS=0x1000777700000000000000000000000000000001

# P2P
DISABLE_P2P_SYNC=false
P2P_SYNC_URL=https://rpc.mxc.com

############################### REQUIRED #####################################
# L1 Mainnet RPC endpoints (you will need an RPC provider such as BlockPi, or run a full Mainnet node yourself).
# If you are using a local Mainnet L1 node, you can refer to it as "http://host.docker.internal:8545" and "ws://host.docker.internal:8546", which refer to the default ports in the .env for an eth-docker L1 node.
# However, you may need to add this host to docker-compose.yml. If that does not work, you can try the private local ip address (e.g. http://192.168.1.15:8545). You can find that with `ip addr show` or a similar command.
# In addition, you can use your public ip address followed by the specific ports for http and ws (e.g. http://82.168.1.15:8545). You can find that with `hostname -I | awk '{print $1}'`.
L1_ENDPOINT_HTTP=
L1_ENDPOINT_WS=
# HTTP RPC endpoint of a L1 beacon node. Everything behind the top-level domain is ignored. Make sure you don't need to work with subdirectories. The path will always be /eth/v1...
# If you are using a local Mainnet L1 node, you can refer to it as "http://host.docker.internal:5052", which refer to the default REST port in the .env for an eth-docker L1 node.
# Or follow the recommendations for http RPC endoint using the default REST port "5052", (e.g. http://82.168.1.15:5052).
L1_BEACON_HTTP=

############################### OPTIONAL #####################################
# If you want to be a prover who generates and submits zero knowledge proofs of proposed L2 blocks, you need to change
# `ENABLE_PROVER` to true and set `L1_PROVER_PRIVATE_KEY`.
ENABLE_PROVER=false
# SGX Raiko service endpoint, required if not running a guardian prover.
SGX_RAIKO_HOST=
# How many provers you want to run concurrently.
PROVER_CAPACITY=1
# A L1 account private key (with a balance of TAIKO deposited on TaikoL1) which will be used to sign the bond for proving the block.
# WARNING: only use a test account, pasting your private key in plain text here is not secure.
L1_PROVER_PRIVATE_KEY=
# Amount to approve TaikoL1 contracts for TaikoToken usage. i.e 250 TAIKO = 250
TOKEN_ALLOWANCE=
# Minimum ETH balance (in ETH) a prover wants to keep.
MIN_ETH_BALANCE=
# Minimum Taiko token balance (in ether) a prover wants to keep. i.e 250 TAIKO = 250
MIN_TAIKO_BALANCE=
# Whether to prove unassigned blocks or not (blocks that have expired their proof window
# without the original prover submitting a proof.).
PROVE_UNASSIGNED_BLOCKS=false

# If you want to be a proposer who proposes L2 execution engine's transactions in mempool to Taiko L1 protocol
# contract (be a "mining L2 node"), you need to change `ENABLE_PROPOSER` to true, then fill `L1_PROPOSER_PRIVATE_KEY`.
ENABLE_PROPOSER=false
# A L1 account (with balance) private key who will send TaikoL1.proposeBlock transactions.
L1_PROPOSER_PRIVATE_KEY=
# Address of the proposed block's suggested L2 fee recipient.
L2_SUGGESTED_FEE_RECIPIENT=
# Comma-delineated list (no spaces) of prover endpoints proposer should query when attempting to propose a block
# If you keep this default value you must also enable a prover by setting ENABLE_PROVER=true.
# Whether to send EIP-4844 blob transactions when proposing blocks.
BLOB_ALLOWED=true
# Comma-delimited local tx pool addresses you want to prioritize, useful to set your proposer to only propose blocks with your prover's transactions.
TXPOOL_LOCALS=
# Minimum tip (in GWei) for a transaction to propose.
EPOCH_MIN_TIP=
# ProverSet Address: We highly recommend you consult the deploy a proverset guide and use separate EOAs for prover and proposer to prevent nonce issues.
PROVER_SET=

# Transaction Manager Flags (Leave blank if using default values.) These only affect Prover and Proposer.
TX_FEE_LIMIT_MULTIPLIER=
TX_FEE_LIMIT_THRESHOLD=
TX_GAS_LIMIT=3000000
TX_MIN_BASEFEE=
TX_MIN_TIP_CAP=
TX_NOT_IN_MEMPOOL=
TX_NUM_CONFIRMATIONS=1
TX_RECEIPT_QUERY=
TX_RESUBMISSION=
TX_SAFE_ABORT_NONCE_TOO_LOW=
TX_SEND_TIMEOUT=
EPOCH_INTERVAL=12s
EPOCH_MIN_PROPOSING_INTERNAL=4h
